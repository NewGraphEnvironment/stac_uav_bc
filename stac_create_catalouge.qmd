This creates a catalog.json and a new sub-directory named the same as the collection id.  In the sub-directory
are subsequent sub-directories for each of the stac items with a json inside. hrefs look correct for items. bit lost.
Getting close though.

```{r env-activate}
library(reticulate)
reticulate::use_condaenv("titiler", required = TRUE)
# reticulate::py_config()

```


```{python fun-cat-create}
import pystac
import os

def create_stac_catalog(path_collection: str, path_catalogue: str):
    """
    Creates a STAC Catalog and links an existing Collection to it.
    
    :param path_collection: Local path to the existing STAC Collection JSON.
    :param path_catalogue: Local directory where the catalog should be saved.
    """
    # Create Catalog
    catalog = pystac.Catalog(
        id="imagery_uav_bc",
        description="Root catalog for UAV imagery in BC"
    )
    
    # Load existing Collection
    collection = pystac.Collection.from_file(path_collection)
    
    # Add Collection to Catalog
    catalog.add_child(collection)
    
    # Save Catalog locally
    # catalog.normalize_and_save(
    #     root_href=path_catalogue,
    #     catalog_type=pystac.CatalogType.SELF_CONTAINED
    # )
    
    # Save only the root catalog JSON without regenerating items
    catalog.normalize_hrefs(path_catalogue)
    catalog.save(catalog_type=pystac.CatalogType.SELF_CONTAINED)
    
    print(f"STAC Catalog created and saved locally at: {path_catalogue}")


```

```{python cat-create}
path_collection = "/Users/airvine/Projects/gis/uav_imagery/imagery_uav_bc/collection.json"
path_collection = "/Users/airvine/Projects/gis/uav_imagery/test/collection.json"

path_catalogue = "/Users/airvine/Projects/gis/uav_imagery/imagery_uav_bc/"
path_catalogue = "/Users/airvine/Projects/gis/uav_imagery/test/"


create_stac_catalog(path_collection, path_catalogue)
```
