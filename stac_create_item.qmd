---
title: "STAC create item "
format: html
jupyter: titiler  # Use your Conda environment
---

```{r env-activate}
library(reticulate)
reticulate::use_condaenv("titiler", required = TRUE)
# reticulate::py_config()

```


```{python import-modules}
import pathlib
import pystac
import rio_stac
```


```{python prototype}
# path_collection = "/Volumes/backup_2022/backups/new_graph/uav_imagery/imagery_uav_bc/imagery_uav_bc.json"
path_collection = "/Users/airvine/Projects/gis/imagery_uav_bc/imagery_uav_bc.json"
path_s3_json = "https://dev-imagery-uav-bc.s3.amazonaws.com/imagery_uav_bc.json"

collection = pystac.Collection.from_file(path_collection)

# Manually force PySTAC to remember the cloud HREF
collection.set_self_href(path_s3_json)

# see it with collection.get_self_href()

# path_base =  pathlib.Path("/Volumes/backup_2022/backups/new_graph/uav_imagery/imagery_uav_bc/")
path_base =  pathlib.Path("/Users/airvine/Projects/gis/imagery_uav_bc/")

# path_item = pathlib.Path("/Volumes/backup_2022/backups/new_graph/uav_imagery/imagery_uav_bc/fraser/nechacko/2024/199171_burnt_cabin_gala/odm_orthophoto/odm_orthophoto.tif")
path_item = pathlib.Path("/Users/airvine/Projects/gis/imagery_uav_bc/fraser/nechacko/2024/199171_burnt_cabin_gala/odm_orthophoto/odm_orthophoto.tif")
path_item = pathlib.Path("/Users/airvine/Projects/gis/imagery_uav_bc/fraser/nechacko/2024/199171_burnt_cabin_gala/odm_dem/dtm.tif")
# path_item = pathlib.Path("/Volumes/backup_2022/backups/new_graph/uav_imagery/imagery_uav_bc/fraser/nechacko/2024/199171_burnt_cabin_gala/odm_dem/dsm.tif")

path_s3 = "https://dev-imagery-uav-bc.s3.amazonaws.com/"

# define the relative path to the item
href_item = path_item.relative_to(path_base)

# Extract components from the path
parts_href = href_item.parts[-len(href_item.parts):-1]
# parts_href = list(path_item.relative_to(path_base).parts[:-1])  # Extract parts of the path

image_type = path_item.stem     # Get filename without extension

# Construct the item ID
item_id = "-".join(parts_href + (image_type,))

# Create the STAC Item
item = rio_stac.stac.create_stac_item(
    path_item, 
    id=item_id,
    # define the media type https://pystac.readthedocs.io/en/stable/api/media_type.html
    asset_media_type='image/tiff; application=geotiff; profile=cloud-optimized',
    asset_name = 'image',
    asset_href=f"{path_s3}{href_item}",
    with_proj=True,  # Extracts and includes projection properties
    collection=collection.id,  # Assign the item to the collection
    collection_url=collection.get_self_href(),  # Use collection's self href
    asset_roles=["data"]
    )

# Add item to collection without altering HREF
collection.add_item(item)

# # Define the correct item self_href
# item_self_href = f"{path_s3}{href_item}".replace(".tif", ".json")  # Ensure it's a .json path
# 
# # Set the item’s self_href
# item.set_self_href(item_self_href)
# 
# print(f"Asset HREF after editing: {item.assets['image'].href}")
# 
# # Save item JSON in the same directory as the TIFF with the item_id as the json name
# path_item_json = pathlib.Path(str(path_item.parent / f"{item_id}.json"))
# 
# item.save_object(dest_href=path_item_json)

item.save_object()

# Save locally
collection.save_object(include_self_link=True, dest_href=path_collection)

```


```{python dev}
# Define the path to the STAC collection JSON file.  
path_collection = "/Users/airvine/Projects/gis/uav_imagery/imagery_uav_bc/imagery_uav_bc.json"
path_collection = "/Users/airvine/Projects/gis/uav_imagery/stac/prod/imagery_uav_bc/collection.json"

# Define the path to the STAC collection JSON file on S3.  Seems a bit weird that we actually
# need to put a file here in able to build our collection
path_s3_json = "https://dev-imagery-uav-bc.s3.amazonaws.com/imagery_uav_bc.json"
path_s3_json = "https://imagery-uav-bc.s3.amazonaws.com/collection.json"


# Load the existing STAC collection from the file
collection = pystac.Collection.from_file(path_collection)

# Manually set the self HREF for the collection to the cloud location
collection.set_self_href(path_s3_json)

# Define the base local path where imagery is stored
path_base = pathlib.Path("/Users/airvine/Projects/gis/uav_imagery/imagery_uav_bc/")
path_base = pathlib.Path("/Users/airvine/Projects/gis/uav_imagery/stac/prod/imagery_uav_bc")


# Define the base S3 URL where assets are hosted
path_s3 = "https://dev-imagery-uav-bc.s3.amazonaws.com/"
path_s3 = "https://imagery-uav-bc.s3.amazonaws.com/"

# Define a list of paths to process

path_items = list(path_base.rglob("*.tif"))
# path_items = [
#     pathlib.Path("/Users/airvine/Projects/gis/imagery_uav_bc/fraser/nechacko/2024/199171_burnt_cabin_gala/odm_orthophoto/odm_orthophoto.tif"),
#     pathlib.Path("/Users/airvine/Projects/gis/imagery_uav_bc/fraser/nechacko/2024/199171_burnt_cabin_gala/odm_dem/dtm.tif"),
#     pathlib.Path("/Users/airvine/Projects/gis/imagery_uav_bc/fraser/nechacko/2024/199171_burnt_cabin_gala/odm_dem/dsm.tif")
# ]

# Iterate over each image file in the list
for path_item in path_items:
    # Compute the relative path of the item within the base directory
    href_item = path_item.relative_to(path_base)
    
    # Extract components from the relative path to construct an item ID
    parts_href = href_item.parts[-len(href_item.parts):-1]
    image_type = path_item.stem  # Get the filename without extension
    item_id = "-".join(parts_href + (image_type,))

    # Create a STAC Item for the given image file
    item = rio_stac.stac.create_stac_item(
        path_item, 
        id=item_id,
        asset_media_type='image/tiff; application=geotiff; profile=cloud-optimized',
        asset_name='image',
        asset_href=f"{path_s3}{href_item}",
        with_proj=True,  # Extract and include projection properties
        collection=collection.id,  # Assign the item to the collection
        collection_url=collection.get_self_href(),  # Use collection's self href
        asset_roles=["data"]
    )

    # Add the newly created item to the collection
    collection.add_item(item)
    
    # Define the correct self_href for the item JSON file
    item_self_href = f"{path_s3}{href_item.parent}/{item_id}.json"
    item.set_self_href(item_self_href)

    # Print the asset HREF for debugging purposes
    print(f"Asset HREF after editing: {item.assets['image'].href}")

    # Save the STAC item JSON in the same directory as the TIFF file
    path_item_json = pathlib.Path(str(path_item.parent / f"{item_id}.json"))
    item.save_object(dest_href=path_item_json)
    
    # path_item_json = path_item.with_suffix(".json")
    # item.save_object(dest_href=path_item_json)
    
    #     # Add the newly created item to the collection
    # collection.add_item(item)

# Save the updated STAC collection with the new items included
collection.save_object(
    # include_self_link=True, 
    dest_href=path_collection
    )

```



```{r json-clean, eval= FALSE}
# DELETE ATTACK - USE WITH CARE
# list all the jsonsin the directory so we can delete them
path_base = "/Users/airvine/Projects/gis/uav_imagery/imagery_uav_bc/"
path_base = "/Users/airvine/Projects/gis/uav_imagery/stac/prod/imagery_uav_bc"

j <- fs::dir_ls(path_base, glob = "*.json", recurse = TRUE)

fs::file_delete(j)

```

```{python validate}


for item in collection.get_all_items():
    try:
        item.validate()
        print(f"✅ {item.id} is valid.")
    except Exception as e:
        print(f"❌ {item.id} failed validation: {e}")

```


```{python, xyz, eval - FALSE}
import mercantile

# Bounds from Titiler response
west, south, east, north = -124.703866, 54.107650, -124.695957, 54.111509

# Choose a zoom level
zoom = 15

# Get a tile covering the center of the bounds
tile = mercantile.tile((west + east) / 2, (south + north) / 2, zoom)

print(f"Tile coordinates: Z={tile.z}, X={tile.x}, Y={tile.y}")
```

```{python query-s3-json}
import pystac

# Load the Collection JSON directly
collection = pystac.Collection.from_file("https://dev-imagery-uav-bc.s3.amazonaws.com/imagery_uav_bc.json")

# Define BC bounding box (approximate)
bbox_bc = [-139, 48, -114, 60]  # (West, South, East, North)

# Get all items linked in the collection
items = collection.get_all_items()

# Filter items that fall within BC bounds
bc_items = []
for item in items:
    # Check if item's bounding box intersects with BC
    item_bbox = item.bbox  # [west, south, east, north]
    if (
        item_bbox[2] >= bbox_bc[0] and  # Item east >= BC west
        item_bbox[0] <= bbox_bc[2] and  # Item west <= BC east
        item_bbox[3] >= bbox_bc[1] and  # Item north >= BC south
        item_bbox[1] <= bbox_bc[3]      # Item south <= BC north
    ):
        bc_items.append(item)

# Print matching items
for item in bc_items:
    print(f"Item: {item.id}")
    for asset_key, asset in item.assets.items():
        print(f"  - {asset_key}: {asset.href}")


```


```{python query-titiler}
import requests
import pystac

# Define BC bounding box (West, South, East, North)
bbox_bc = [-139, 48, -114, 60]

# Titiler endpoint
titiler_endpoint = "http://titiler-env.eba-s4jhubvr.us-west-2.elasticbeanstalk.com"

# Load the STAC Collection
collection_url = "https://dev-imagery-uav-bc.s3.amazonaws.com/imagery_uav_bc.json"
collection = pystac.Collection.from_file(collection_url)

# Get all items
items = collection.get_all_items()

# Filter items using /stac/bounds
matching_items = []
for item in items:
    stac_url = item.get_self_href()
    bounds_url = f"{titiler_endpoint}/stac/bounds?url={stac_url}"

    response = requests.get(bounds_url)
    if response.status_code == 200:
        item_bbox = response.json()["bounds"]  # [west, south, east, north]

        # Check intersection with BC bbox
        if (
            item_bbox[2] >= bbox_bc[0] and  # Item east >= BC west
            item_bbox[0] <= bbox_bc[2] and  # Item west <= BC east
            item_bbox[3] >= bbox_bc[1] and  # Item north >= BC south
            item_bbox[1] <= bbox_bc[3]      # Item south <= BC north
        ):
            matching_items.append((item.id, stac_url))

# Print matching items
print("Matching Items in BC:")
for item_id, stac_url in matching_items:
    print(f"- {item_id}: {stac_url}")


```

